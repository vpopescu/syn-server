/**
 * STUN utility functions
 */
use crc32fast::Hasher as Crc32Hasher;

use super::attribute_type::ATTR_FINGERPRINT;

/**
 * Calculate the CRC32 fingerprint for a STUN message. The final CRC is XOR'd with 0x5354554E
 * For more information see RFC 5389
 * https://datatracker.ietf.org/doc/html/rfc5389#section-15.5
 *
 * @param message The message to calculate the fingerprint for
 * @return The CRC32 fingerprint is returned in local byte order and stripped of its mask
 *
 */
pub(crate) fn calculate_local_fingerprint(message: &[u8]) -> u32 {
    let mut hasher = Crc32Hasher::new();
    hasher.update(&message[..message.len() - 8]);
    hasher.finalize()
}

pub(crate) fn get_local_fingerprint(
    message: &[u8],
) -> Result<Option<u32>, Box<dyn std::error::Error>> {    
    match get_attribute_index(ATTR_FINGERPRINT, &message) {
        Some(i) => {
            if (i + 8) > message.len() {
                return Err("Fingerprint attribute is incomplete".into());
            }
            // Extract and decode the FINGERPRINT value
            Ok(Some(
                u32::from_be_bytes((&message[i + 4..i + 8]).try_into()?) ^ 0x5354554E,
            ))
        }
        None => Ok(None),
    }
}

fn get_attribute_index(attr_type: u16, message: &[u8]) -> Option<usize> {
    let mut index = 20; // STUN header is 20 bytes
    while index + 4 <= message.len() {
        let current_attr_type = u16::from_be_bytes([message[index], message[index + 1]]);
        let current_attr_length =
            u16::from_be_bytes([message[index + 2], message[index + 3]]) as usize;
        if current_attr_type == attr_type {
            return Some(index);
        }
        index += 4 + current_attr_length; // Move to the next attribute
    }
    None
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_calculate_fingerprint() {
        let stun_packet0: [u8; 100] = [
            0x01, 0x01, 0x00, 0x50, 0x21, 0x12, 0xa4, 0x42, 0xe5, 0x48, 0x69, 0x4c, 0x28, 0x25,
            0x5c, 0xe8, 0x55, 0x22, 0x6b, 0x3e, 0x00, 0x20, 0x00, 0x08, 0x00, 0x01, 0xfb, 0x59,
            0x4d, 0xed, 0x57, 0xae, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0xda, 0x4b, 0x6c, 0xff,
            0xf3, 0xec, 0x80, 0x2b, 0x00, 0x08, 0x00, 0x01, 0x0d, 0x96, 0xd5, 0xfb, 0x30, 0x93,
            0x80, 0x2c, 0x00, 0x08, 0x00, 0x01, 0x0d, 0x97, 0xd5, 0xfb, 0x30, 0x93, 0x80, 0x22,
            0x00, 0x14, 0x43, 0x6f, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x34, 0x2e, 0x36, 0x2e, 0x31,
            0x20, 0x27, 0x47, 0x6f, 0x72, 0x73, 0x74, 0x27, 0x80, 0x28, 0x00, 0x04, 0x5c, 0xe6,
            0x03, 0x12,
        ];

        // bytes from packet
        let calculated = calculate_local_fingerprint(&stun_packet0);
        let extracted: u32 = get_local_fingerprint(&stun_packet0).unwrap().unwrap();

        // algorithm

        assert_eq!(calculated, extracted);

        let stun_packet1: [u8; 100] = [
            0x01, 0x01, 0x00, 0x50, 0x21, 0x12, 0xa4, 0x42, 0xe5, 0x48, 0x69, 0x4c, 0x28, 0x25,
            0x5c, 0xe8, 0x55, 0x22, 0x6b, 0x3e, 0x00, 0x20, 0x00, 0x08, 0x00, 0x01, 0xfb, 0x59,
            0x4d, 0xed, 0x57, 0xae, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0xda, 0x4b, 0x6c, 0xff,
            0xf3, 0xec, 0x80, 0x2b, 0x00, 0x08, 0x00, 0x01, 0x0d, 0x96, 0xd5, 0xfb, 0x30, 0x93,
            0x80, 0x2c, 0x00, 0x08, 0x00, 0x01, 0x0d, 0x97, 0xd5, 0xfb, 0x30, 0x93, 0x80, 0x22,
            0x00, 0x14, 0x43, 0x6f, 0x74, 0x75, 0x72, 0x6e, 0x2d, 0x34, 0x2e, 0x36, 0x2e, 0x31,
            0x20, 0x27, 0x47, 0x6f, 0x72, 0x73, 0x74, 0x27, 0x80, 0x28, 0x00, 0x04, 0x5c, 0xe6,
            0x03, 0x12,
        ];

        // bytes from packet
        let calculated = calculate_local_fingerprint(&stun_packet1);
        let extracted: u32 = get_local_fingerprint(&stun_packet1).unwrap().unwrap();

        // algorithm

        assert_eq!(calculated, extracted);

        let stun_packet2: [u8; 44] = [
            0x00, 0x01, 0x00, 0x18, 0x21, 0x12, 0xa4, 0x42, 0x88, 0x34, 0xff, 0xdd, 0x74, 0xda,
            0x13, 0x63, 0x71, 0xbc, 0x7d, 0x8e, 0x80, 0x22, 0x00, 0x0c, 0x53, 0x74, 0x75, 0x6e,
            0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x80, 0x28, 0x00, 0x04, 0x46, 0xc4,
            0x7f, 0xcc,
        ];

        // bytes from packet
        let calculated = calculate_local_fingerprint(&stun_packet2);
        let extracted: u32 = get_local_fingerprint(&stun_packet2).unwrap().unwrap();

        // algorithm

        assert_eq!(calculated, extracted);
    }

    #[test]
    fn test_get_fingerpint() {
        let stun_packet_with_fp: [u8; 44] = [
            0x00, 0x01, 0x00, 0x18, 0x21, 0x12, 0xa4, 0x42, 0x88, 0x34, 0xff, 0xdd, 0x74, 0xda,
            0x13, 0x63, 0x71, 0xbc, 0x7d, 0x8e, 0x80, 0x22, 0x00, 0x0c, 0x53, 0x74, 0x75, 0x6e,
            0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x00, 0x00, 0x80, 0x28, 0x00, 0x04, 0x46, 0xc4,
            0x7f, 0xcc,
        ];

        let calculated = calculate_local_fingerprint(&stun_packet_with_fp);
        let extracted: u32 = get_local_fingerprint(&stun_packet_with_fp)
            .unwrap()
            .unwrap();

        assert_eq!(calculated, extracted);

        let stun_packet_without_fp = [
            0x00, 0x01, 0x00, 0x10, 0x21, 0x12, 0xa4, 0x42, 0xd4, 0x92, 0x10, 0xa9, 0xbb, 0xab,
            0x26, 0xb8, 0x4f, 0x8a, 0x68, 0xa0, 0x80, 0x22, 0x00, 0x0c, 0x53, 0x74, 0x75, 0x6e,
            0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x00, 0x00,
        ];

        assert!(get_local_fingerprint(&stun_packet_without_fp).is_ok());
    }
}
